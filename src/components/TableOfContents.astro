---
import type { MarkdownHeading } from 'astro';
import { Icon } from 'astro-icon';

export interface Props {
    url: string;
    headings?: MarkdownHeading[];
    depth?: number;
    max?: number;
    item?: string;
    title?: string;
    open?: boolean;
}

const {
    url,
    headings=[],
    depth=1,
    max=6,
    item: Item ="a",
    title,
    open=false
} = Astro.props

const equalDepth = headings.filter(h => h.depth === +depth);

const Tag = depth === 1 ? 'details' : 'ol'

const attrs = {
    class: depth === 1 ? "table-of-contents": null,
    open: open && depth === 1 ? true : null,
    'data-depth': depth
}
---

<Tag {...attrs}>
    { equalDepth.map((heading, i) => {
        const start = headings.indexOf(heading) + 1
        const end = headings.indexOf(equalDepth[i + 1])
        const subHeadings = headings.slice(start, end === -1 ? undefined : end)
        const text = heading.text.replace(/^#/g, '')
        const param = {
            Self: Astro.self,
            props: { 
                url, 
                headings: subHeadings, 
                depth: heading.depth + 1
            },
            heading,
            subHeadings,
            ...Astro.props
        } 
        return <>
            { depth === 1
                ? <summary class="touch-target">
                    <Item href={Item==='a'?url:null}>{title||text}</Item>
                    <Icon name="radix-icons:caret-up" size={24}/>
                </summary>
                : <li>
                    <Item href={Item==='a'?`${url}#${heading.slug}`:null}>{text}</Item>
                    { !!subHeadings.length && heading.depth < +max && depth > 1 && <Astro.self {...param.props}/> }
                </li>
            }
            { !!subHeadings.length && heading.depth < +max && depth === 1 && <Astro.self {...param.props}/> }
        </>
    })}
</Tag>