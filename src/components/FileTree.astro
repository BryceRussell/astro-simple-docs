---
import { Icon } from 'astro-icon';

function createTree(directories: string[]) {
  let tree: FileTreeNode = {};

  for (const directory of directories) {
    let current = tree;
    const path = directory.split('/');

    for (const dir of path) {
      if (!current[dir]) {
        current[dir] = {};
      }
      current = current[dir];
    }
  }

  return tree;
}

export interface Props {
  dirs: string[];
  tree?: FileTreeNode;
  url?: string;
  depth?: number;
  max?: number;
}

const {
    dirs=[],
    tree=createTree(dirs)['']||{},
    url="/docs",
    depth=1,
    max=2
} = Astro.props

interface FileTreeNode {
    [dir: string]: FileTreeNode
}

const current = Astro.url.pathname.split('/').slice(0, 3).join('/')

// Open dialog if it relates to current page
var open = false
if (depth === 1) {
  for (let key in tree) {
      if (`${url}/${key}` === current) open = true;
      break;
  }
}

const Tag = depth === 1 ? 'details' : 'ol'

const _attrs = {
    class: depth === 1 ? "table-of-contents": null,
    open,
    'data-depth': depth,
}
---

<Tag {..._attrs}>
    { Object.entries(tree).map(([key, val]) => {
        const newUrl = url+'/'+key
        const _props = {
          tree: val,
          url: newUrl,
          depth: depth + 1
        }
        return <>
            { depth === 1
              ? <summary>
                  <a href={newUrl}>{key}</a>
                  <Icon name="radix-icons:caret-up" size={24}/>
                </summary>
              : <li>
                  <a href={newUrl}>{key}</a>
                  { depth > 1 && depth <= max && <Astro.self {..._props}/> }
                </li>
            }
            { depth === 1 && depth <= max && <Astro.self {..._props}/> }
        </>
    })}
</Tag>
