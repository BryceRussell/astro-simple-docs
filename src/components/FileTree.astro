---
import type { Tree, Link, DETAILS_COMMON } from '@/types';
import fg from 'fast-glob';
import Details from './Details.astro';
import { getEntryBySlug } from 'astro:content';

export interface Props extends DETAILS_COMMON {
    glob?: string;
}

const {
    glob,
    depth=2,
    open=true,
    ...props
} = Astro.props as Props

function generateFileTree(paths: string[]) {
    const root: Tree<{}> = {};
    for (const path of paths) {
        const slugs = path.split('/');
        let node = root;
        for (let i = 0; i < slugs.length; i++) {
            const slug = slugs[i];
            if (!node[slug]) {
                node[slug] = {};
            }
            node = node[slug];
        }
    }
    return root;
}

async function generateHeadings(obj: Tree<{}>, path = '', depth = 1, result: Link[] = []) {
    for (let key in obj) { 
        const slug = path+'/'+key
        const entry = await getEntryBySlug('docs', slug.replace(/^\//, ''));
        const text = entry?.data.title || key
        result.push({ depth: depth, href: '/docs'+slug, slug: '', text })
        if (!!Object.keys(obj[key]).length) await generateHeadings(obj[key], slug, depth + 1, result)
    }
    return result;
}

const fileTree = generateFileTree(
    (await fg(`src/content/docs/` + glob, { onlyDirectories: true })).map(p => p.replace('src/content/docs/',''))
)

const walk = Object.entries(fileTree)
---

{ walk.map(async([key, val]) => {
    const headings = await generateHeadings({[key]:val})
    return <Details {open} {depth} {...{headings, ...props}}/>
})}

{!walk.length && props.title && <Details {open} {depth} {...{headings:[], ...props}}/>}
