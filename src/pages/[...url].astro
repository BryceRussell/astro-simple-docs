---
import fg from 'fast-glob';
import Base from "@/layouts/Base.astro";
import TableOfContents from "@/components/TableOfContents.astro";
import type { MarkdownInstance } from 'astro';
import type { Frontmatter } from "@/types";

export async function getStaticPaths() {
    // Automatically create indexes for directories
    var pages: MarkdownInstance<Frontmatter>[] = []
    try {
        pages = await Astro.glob<Frontmatter>('/src/pages/docs/**/*.md')
        pages = pages
            .filter(page => !page.frontmatter.draft)
    } catch {
        console.warn("Could not find any markdown files, create a new entry at /admin")
    }
    const urls = fg.sync('src/pages/**', { onlyDirectories: true }).map(d => d.replace('src/pages/', ''))
    return urls.map(url => ({
        params: {
            url
        },
        props: {
            url,
            pages: pages.filter(page => page.url?.startsWith('/'+url))
        }
    }))
}

export interface Props {
    url: string,
    pages: MarkdownInstance<any>[];
}

const {
    url,
    pages
} = Astro.props as Props
---

<Base breadcrumb>
    <section class="flex-list">
        <h1>Table of Contents</h1>
        {pages.map(page => (
            <TableOfContents url={page.url||''} headings={page.getHeadings()}/>
        ))}
    </section>
</Base>