---
import fg from 'fast-glob';
import Grid from "@/layouts/Grid.astro";
import RootFileTree from "@/components/RootFileTree.astro";
import type { MarkdownInstance } from 'astro';
import type { Frontmatter } from "@/types";
import TableOfContents from '@/components/TableOfContents.astro';

export async function getStaticPaths() {
    // Automatically create indexes for directories
    var pages: MarkdownInstance<Frontmatter>[] = []
    try {
        pages = await Astro.glob<Frontmatter>('/src/pages/docs/**/*.md')
        pages = pages
            .filter(page => !page.frontmatter.draft)
    } catch {
        console.warn("Could not find any markdown files, create a new entry at /admin")
    }
    const urls = fg.sync('src/pages/**', { onlyDirectories: true }).map(d => d.replace('src/pages/', ''))
    return urls.map(url => ({
        params: {
            url
        },
        props: {
            url,
            pages: pages.filter(page => page.url?.startsWith('/'+url)),
            allPages: pages
        }
    }))
}

export interface Props {
    url: string,
    pages: MarkdownInstance<any>[];
    allPages: MarkdownInstance<any>[];
}

const {
    url='',
    pages,
    allPages
} = Astro.props as Props
---

<Grid>
    <RootFileTree slot="sidebar-left" pages={allPages} />
    <nav style="display:flex;flex-direction:column;gap:.5em;">
        { pages.map(page => <TableOfContents open url={page.url} headings={page.getHeadings()} max={2}/>) }
    </nav>
</Grid>